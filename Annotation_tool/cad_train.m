% build the CAD model from anchor points
function cad = cad_train(cls, name)

switch cls
    case 'aeroplane'
        anchor = {'left_elevator', 'left_wing', 'noselanding', 'right_elevator',...
            'right_wing', 'rudder_lower', 'rudder_upper', 'tail'};
    case 'bed'
        anchor = {'back_left', 'back_right',...
            'frame_upper_left', 'frame_upper_right',...
            'frame_lower_left', 'frame_lower_right',...
            'mattres_upper_left', 'mattres_upper_right',...
            'mattres_lower_left', 'mattres_lower_right'};
    case 'boat'
        anchor = {'head', 'head_down', 'head_left', 'head_right',...
            'tail_left', 'tail_right', 'tail'};
    case 'bicycle'
        anchor = {'head_center', 'left_back_wheel', 'left_front_wheel',...
            'left_handle', 'left_pedal_center', 'right_back_wheel',...
            'right_front_wheel', 'right_handle', 'right_pedal_center',...
            'seat_back', 'seat_front'};
    case 'bottle'
        anchor = {'mouth', 'body', 'body_left', 'body_right',...
            'bottom', 'bottom_left', 'bottom_right'};
    case 'bus'
        anchor = {'body_back_left_lower', 'body_back_left_upper',...
            'body_back_right_lower', 'body_back_right_upper',...
            'body_front_left_upper', 'body_front_right_upper',...
            'body_front_left_lower', 'body_front_right_lower',...
            'left_back_wheel', 'left_front_wheel',...
            'right_back_wheel', 'right_front_wheel'}; 
    case 'car'
        anchor = {'left_front_wheel', 'left_back_wheel',...
            'right_front_wheel', 'right_back_wheel',...
            'upper_left_windshield', 'upper_right_windshield',...
            'upper_left_rearwindow', 'upper_right_rearwindow',...
            'left_front_light', 'right_front_light',...
            'left_back_trunk', 'right_back_trunk'};
        aspect = {'head', 'left', 'right', 'front', 'back', 'tail'};        
    case 'cellphone'
        anchor = {'insidescreen_lower_left', 'insidescreen_lower_right',...
            'insidescreen_upper_left', 'insidescreen_upper_right',...
            'lowerkeyboard_lower_left', 'lowerkeyboard_lower_right',...
            'lowerkeyboard_upper_left', 'lowerkeyboard_upper_right',...
            'outsidescreen_lower_left', 'outsidescreen_lower_right',...
            'outsidescreen_upper_left', 'outsidescreen_upper_right',...
            'upperkeyboard_lower_left', 'upperkeyboard_lower_right',...
            'upperkeyboard_upper_left', 'upperkeyboard_upper_right'};
    case 'chair'
        anchor = {'back_upper_left', 'back_upper_right',...
            'seat_upper_left', 'seat_upper_right',...
            'seat_lower_left', 'seat_lower_right',...
            'leg_upper_left', 'leg_upper_right',...
            'leg_lower_left', 'leg_lower_right'};
    case 'iron'
        anchor = {'handle_back', 'handle_top', 'back_left', 'back_right', 'tip'};
    case 'motorbike'
        anchor = {'back_seat', 'front_seat', 'head_center', 'headlight_center',...
            'left_back_wheel', 'left_front_wheel','left_handle_center',...
            'right_back_wheel', 'right_front_wheel', 'right_handle_center'};
    case 'mouse'
        anchor = {'peak', 'head', 'scroll_lower', 'scroll_upper', 'tail'};
    case 'mug'
        anchor = {'bottom_near_handle', 'bottom_opposite_handle',...
            'handle_bottom', 'handle_top', 'top_near_handle', 'top_opposite_handle'};
    case 'shoe'
        anchor = {'back_bottom', 'back_top', 'front_bottom', 'front_line', 'front_top'};
    case 'sofa'
        anchor = {'front_bottom_left', 'front_bottom_right',...
            'seat_bottom_left', 'seat_bottom_right', 'left_bottom_back',...
            'right_bottom_back', 'top_left_corner',  'top_right_corner', ....
            'seat_top_left', 'seat_top_right'};
    case 'stapler'
        anchor = {'back_lower_left', 'back_lower_right', 'back_upper_left',...
            'back_upper_right', 'front_upper_left',...
            'front_upper_right', 'front_bottom_left', 'front_bottom_right'};
    case 'diningtable'
        anchor = {'leg_upper_left', 'leg_upper_right', 'leg_lower_left', 'leg_lower_right',...
            'top_upper_left', 'top_upper_right', 'top_lower_left', 'top_lower_right',...
            'top_up', 'top_down', 'top_left', 'top_right'};
    case 'toaster'
        anchor = {'leftside_bottom_left', 'leftside_bottom_right',...
            'leftside_top_left', 'leftside_top_right',...
            'rightside_bottom_left', 'rightside_bottom_right',...
            'rightside_top_left', 'rightside_top_right'};
    case 'train'
        anchor = {'head_left_bottom', 'head_left_top', 'head_right_bottom', 'head_right_top', 'head_top',...
            'mid1_left_bottom', 'mid1_left_top', 'mid1_right_bottom', 'mid1_right_top',...
            'mid2_left_bottom', 'mid2_left_top', 'mid2_right_bottom', 'mid2_right_top',...
            'tail_left_bottom', 'tail_left_top', 'tail_right_bottom', 'tail_right_top'};
    case 'tvmonitor'
        anchor = {'front_bottom_left', 'front_bottom_right',...
            'front_top_left', 'front_top_right',...
            'back_bottom_left', 'back_bottom_right',...
            'back_top_left', 'back_top_right'};
end

azimuth_extent = [];
azimuth = 0:5:355;
elevation = -90:2.5:90;

filename = sprintf('%s.off', name);
[cad.vertices, cad.faces] = load_off_file(filename);

cad.pnames = anchor;
cad.azimuth_extent = azimuth_extent;
% load anchor points
for i = 1:numel(anchor)
    filename = sprintf('%s_%s.off', name, anchor{i});
    if exist(filename) == 0
        fprintf('file %s not exist\n', filename);
        cad.(anchor{i}) = [];
    else
        X = load_off_file(filename);
        if size(X,1) > 1
            X = mean(X);
        end
        cad.(anchor{i}) = X;
    end
end

cad.azimuth = azimuth;
cad.elevation = elevation;
% use zbuffer algorithm to decide the visibility of anchor points
command = sprintf('./anchor_depth_test %s %s', cls, name);
if unix(command) ~= 0
    fprintf('anchor depth test error!\n');
end

% load visibility information
filename = sprintf('%s.vty', name);
fid = fopen(filename, 'r');
num = fscanf(fid, '%d');
for i = 1:num
    visibility(i).azimuth = fscanf(fid, '%f', 1);
    visibility(i).elevation = fscanf(fid, '%f', 1);
    visibility(i).flag = fscanf(fid, '%d', numel(anchor));
end
cad.visibility = visibility;

% load aspect points
cad.aspect = aspect;
for i = 1:numel(aspect)
    filename = sprintf('%s_%s.off', name, aspect{i});
    if exist(filename) == 0
        fprintf('file %s not exist\n', filename);
        cad.(aspect{i}) = [];
    else
        X = load_off_file(filename);
        if size(X,1) > 1
            X = mean(X);
        end
        cad.(aspect{i}) = X;
    end
end